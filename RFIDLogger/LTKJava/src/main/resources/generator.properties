# files are generated according to specifications in xml files.
# There must be a definition entry for each xml file (LLRP as well as vendor extensions) where a definition must look as follows:
# definition = vendorIdentifier;defintionXMLPath;messageSchemaPath 
# where
# vendorIdentifier must correlate with namespace prefix found in definitionXML. Attention, they are case sensitiv!
# defintionXMLPath is path to xml file defining vendor extensions
# messageSchemaPath is path to xml Schema (xsd File) to validate encoded messages
# and the three definitions are separated by a semicolon (;)

# do not remove this line - just change paths to llrp xml and xsd to fit your needs
definition = llrp;../Definitions/Core/llrp-1x0-def.xml;../Definitions/Core/llrp-1x0.xsd

# add vendor definitions here (currently, it is still also necessary to adjust the 
# extension_xsd property in the build.xml file
# first element is the namepsace prefix and must be consistent with namespace prefix in xml and xsd
#definition = Impinj;impinj/Impinjdef.xml;impinj/Impinj.xsd



# additional infomration for LLRP
externalLLRPSchema = http://www.llrp.org/ltk/schema/core/encoding/xml/1.0/llrp.xsd
# redirect the above specified external reference of llrp schema file to the schema file definied in property "definition" 
redirectExternalResources = true

XMLEncodingSchemaPath = LTKJava/src/main/java/org/llrp/ltk/llrp-1x0.xsd
XMLEncodingNamespace = http://www.llrp.org/ltk/schema/core/encoding/xml/0.9
XMLEncodingSchema = http://www.w3.org/2001/XMLSchema-instance
NamespacePrefix = rp
JarSchemaPath = org/llrp/ltk/
#logging - log4j properties

# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=INFO, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

# package specific levels
log4j.logger.org.llrp.ltk = WARN
log4j.logger.org.llrp.ltkGenerator = WARN
log4j.logger.de.hunsicker = ERROR

#template files
messageTemplate = src/main/resources/templates/javaMessageTemplate.vm
parameterTemplate = src/main/resources/templates/javaParameterTemplate.vm
enumerationTemplate = src/main/resources/templates/javaEnumerationTemplate.vm
customEnumerationTemplate = src/main/resources/templates/javaCustomEnumerationTemplate.vm
interfaceTemplate = src/main/resources/templates/javaInterfaceTemplate.vm
customInterfaceTemplate = src/main/resources/templates/javaCustomInterfaceTemplate.vm
customParameterTemplate = src/main/resources/templates/javaCustomParameterTemplate.vm
customMessageTemplate = src/main/resources/templates/javaCustomMessageTemplate.vm
constantsTemplate = src/main/resources/templates/javaConstantsTemplate.vm
messageFactoryTemplate = src/main/resources/templates/javaMessageFactoryTemplate.vm

#file ending
fileEnding = .java



#sources to be formatted
sourceFolder = src/main/java/org/llrp/ltk/generated

#jaxB generator
jaxBPackage = org.llrp.ltkGenerator.generated

# class generator packages
generatedBase = src/main/java/org/llrp/ltk/generated/
generatedMessagePackage = src/main/java/org/llrp/ltk/generated/messages/
generatedInterfacePackage = src/main/java/org/llrp/ltk/generated/interfaces/
generatedCustomInterfacePackage = src/main/java/org/llrp/ltk/generated/custom/interfaces/
generatedParameterPackage = src/main/java/org/llrp/ltk/generated/parameters/
generatedEnumerationPackage = src/main/java/org/llrp/ltk/generated/enumerations/
generatedCustomEnumerationPackage = src/main/java/org/llrp/ltk/generated/custom/enumerations/
generatedCustomParameterPackage = src/main/java/org/llrp/ltk/generated/custom/parameters/
generatedCustomMessagePackage = src/main/java/org/llrp/ltk/generated/custom/messages/
generateConstantsPackage = src/main/java/org/llrp/ltk/generated/

# directory with test xml and binary messages for unit testing
testDirectory = src/test/resources