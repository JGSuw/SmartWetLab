 ## javaMessageTemplate.vm
/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/
 * for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
 

package org.llrp.ltk.generated.messages;
	

## some strings we need
#set($encode = ".encodeBinary()")	
#set($encodeXML = ".encodeXML")
#set($list = "List")
#set($length = ".length()")
#set($resName = "reserved")
#set($resType = "BitList")
#set($typeNum = ".TYPENUM")
#set($add = ".add")
#set($emptyBrack = "()")
#set($subtypeNr = "getParameterSubtype()")
#set($getClassName = ".getClass().getSimpleName()")
#set($ns = "NAMESPACE")

##set the class names here
#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($parameterDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")

#set ($mustListRepeat = "1-N")
#set ($exactlyOnceRepeat = "1")
#set ($optionalRepeat = "0-1")
#set ($optionalListRepeat = "0-N")
	
	
	
##imports
## must clear the helper set
$utility.clearImports()
## some imports are always needed
## remember imports to avoid importing twice the same

	import java.util.LinkedList;
	$utility.addImport("LinkedList")
	import java.util.List;
	$utility.addImport("List")
	import org.apache.log4j.Logger;
	$utility.addImport("LOGGER")
	
	import org.jdom.Document;
	$utility.addImport("document")
	import org.jdom.Element;
	$utility.addImport("element")
	import org.jdom.Namespace;
	$utility.addImport("Namespace")
	
	import org.llrp.ltk.types.LLRPBitList;
	$utility.addImport("LLRPBitList")
	import org.llrp.ltk.types.BitList;
	$utility.addImport("BitList")
	import org.llrp.ltk.types.LLRPMessage;
	$utility.addImport("LLRPMessage")
	import org.llrp.ltk.types.SignedShort;
	$utility.addImport("SignedShort")
	import org.llrp.ltk.types.UnsignedShort;
	$utility.addImport("UnsignedShort")
	import org.llrp.ltk.types.UnsignedInteger;
	$utility.addImport("UnsignedInteger")
	import org.llrp.ltk.exceptions.MissingParameterException;
	$utility.addImport("MissingParameterException")
	import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
	$utility.addImport("InvalidLLRPMessageException")
import org.llrp.ltk.generated.LLRPConstants;
	$utility.addImport("LLRPConstants")
	
	
	import org.llrp.ltk.generated.parameters.Custom;
	$utility.addImport("Custom")
		
	##custom parameters
	#foreach ($custom in $utility.allowedCustom($message.getName()))
	import org.llrp.ltk.generated.custom.parameters.$custom;
	$utility.addImport($custom)
	#end

	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			#if (!$utility.hasImport($resType))
				import org.llrp.ltk.types.$resType;
				$utility.addImport($resType)
			#end
		#elseif ($utility.hasType($field,$fieldDefinition))
			## its a field and therefore it might be also an enumeration
			## only place where we can find super types of enumerations
			#if ($field.getEnumeration() && !$utility.isCustomEnumeration($field.getEnumeration()))
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$field.getEnumeration()")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType().value())
						$utility.addImport($together)
						import org.llrp.ltk.generated.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.enumerations.$field.getEnumeration();
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getEnumeration() && $utility.isCustomEnumeration($field.getEnumeration()))
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$field.getEnumeration()")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType().value())
						$utility.addImport($together)
						import org.llrp.ltk.generated.custom.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.custom.enumerations.$field.getEnumeration();
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				#if (!$utility.hasImport($together))
					import org.llrp.ltk.types.$together;
					$utility.addImport($together)
				#end
			#elseif (!$utility.hasImport($utility.convertType($field.getType().value())))
				import org.llrp.ltk.types.$utility.convertType($field.getType().value());
				$utility.addImport($utility.convertType($field.getType().value()))
			#end
		## FieldDefinition
		#else
					//TODO 1 template wrote this - unexpected object $field
		#end	
	#end
	
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		##for choices we must also import implementing classes
		#if ($utility.hasType($field,$choiceReference))
			##check all subtypes
			#foreach ($subtype in $utility.getSubTypes($field.getType()))
				import org.llrp.ltk.generated.parameters.$subtype;
				$utility.addImport($subtype)
			#end
			import org.llrp.ltk.generated.interfaces.$field.getType();
			$utility.addImport($field.getType())
		#else
			#if (!$utility.hasImport($field.getType()))
				import org.llrp.ltk.generated.parameters.$field.getType();
				$utility.addImport($field.getType())
			#end
		#end
	#end
	
	##import interfaces to implement
	#foreach ($interface in $utility.getInterfaces($message.getName()))
		import org.llrp.ltk.generated.interfaces.$interface;
		$utility.addImport($interface)
	#end
##end imports
	
	
	
		
/**
 * $utility.getAnnotation($message)
 */




## beginning of class
public class $message.getName() extends LLRPMessage{						

##typeNum is always needed
	public static final SignedShort TYPENUM = new SignedShort($message.getTypeNum());
	#set($class = ".class")
	private static final Logger LOGGER = Logger.getLogger($message.getName()$class);
	#if ($message.getResponseType())
		public static final String RESPONSETYPE = "$message.getResponseType()";
	#else 
		public static final String RESPONSETYPE = "";
	#end
	
	
## field or reserved
#foreach($field in $message.getFieldOrReserved())
	## reserved field
	#if ($utility.hasType($field,$reservedDefinition))
		protected $resType $resName$utility.getCurrentNumerOfReserved() = new $resType ($field.getBitCount());
		#elseif ($utility.hasType($field,$fieldDefinition))
			#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#set ($anEnum = $utility.firstToUpperCase($curType))
				protected $anEnum $utility.firstToLowerCase($field.getName());
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				protected $firstF$secondF$thirdF $utility.firstToLowerCase($field.getName()); 
			#else
				protected $utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName());
			#end
	## FieldDefinition
	#else
				//TODO 2 template wrote this - unexpected object $field
	#end	
#end
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  	

## constructor
		
/**
 * empty constructor to create new message 
 * with LLRP version set to 1.0 (0x1).
 */
	public $message.getName()(){
		setVersion(new BitList(0,0,1));
	}

/**
 * Constructor to create message from binary encoded message
 * calls decodeBinary to decode message.
 * @param list to be decoded
 */
	public $message.getName()(final LLRPBitList list) throws InvalidLLRPMessageException {
		decodeBinary(list.toByteArray());
	}

/**
 * Constructor to create message from binary encoded message
 * calls decodeBinary to decode message.
 * @param byteArray representing message
 */
	public $message.getName()(final byte[] byteArray) throws InvalidLLRPMessageException {
		decodeBinary(byteArray);
	}
	
	/**
 * Constructor to create message from xml encoded message
 * calls decodeXML to decode message.
 * @param document to be decoded
 */	
	public $message.getName()(final Document document) throws InvalidLLRPMessageException {
		decodeXML(document);
	}

## parameter or choice
#foreach($field in $message.getParameterOrChoice())
	## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
	## however there are some exceptions to this where there is a name given

	#if ($field.getName())
		#set ($curName = $utility.firstToLowerCase($field.getName()))
	#else
		#set ($curName = $utility.firstToLowerCase($field.getType()))
	#end 	
	#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
		protected List<$field.getType()> $curName$list = new LinkedList<$field.getType()>();
	#else
		protected $field.getType() $curName;
	#end
#end



## encode method
		/**
	 * {@inheritDoc}
	 */
	protected LLRPBitList encodeBinarySpecific() throws InvalidLLRPMessageException {
	LLRPBitList resultBits = new LLRPBitList();
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		#if ($utility.hasType($field,$reservedDefinition))
			resultBits.append($resName$utility.getCurrentNumerOfReserved()$encode);
		#elseif ($utility.hasType($field,$fieldDefinition))
			if ($utility.firstToLowerCase($field.getName())== null){
				LOGGER.warn(" $utility.firstToLowerCase($field.getName()) not set");
				throw new InvalidLLRPMessageException(" $utility.firstToLowerCase($field.getName()) not set  for Parameter of Type $message.getName()");
			} 
			resultBits.append($utility.firstToLowerCase($field.getName())$encode);
		## FieldDefinition
		#else
			//TODO 3 template parameter encode wrote this - unexpected object $field
		#end
	#end
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
		## however there are some exceptions to this where there is a name given

		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat)
			if ($curName$list== null){
				LOGGER.warn(" $curName$list not set");
				//parameter has to be set - throw exception
				throw new InvalidLLRPMessageException(" $curName$list not set");
			} else {
				for ($field.Type field : $curName$list){
					resultBits.append(field$encode);
				}
			}
		#elseif ($field.getRepeat()==$optionalListRepeat)
			if ($curName$list== null){
				//just warn - it is optional 
				LOGGER.info(" $curName$list not set");
			} else {
				for ($field.Type field : $curName$list){
					resultBits.append(field$encode);
				}
			}
		#elseif ($field.getRepeat()==$exactlyOnceRepeat)
			if ($curName == null){
				// single parameter, may not be null
				LOGGER.warn(" $curName not set");
				throw new InvalidLLRPMessageException(" $curName not set");
			} else {
				resultBits.append($curName$encode);
			}
		#elseif ($field.getRepeat()==$optionalRepeat)
			if ($curName == null){
				// optional parameter, may be null
				LOGGER.info(" $curName not set");
			} else {
				resultBits.append($curName$encode);
			}
				 
		#else
			// TODO field.getRepeat = $field.getRepeat() not handled
		#end
	#end
		return resultBits;
	}
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  	
## encode xml
		/**
	 * {@inheritDoc}
	 */
	public Document encodeXML() throws InvalidLLRPMessageException {
	
			try{
	
			Namespace ns = Namespace.getNamespace("llrp",LLRPConstants.LLRPNAMESPACE);

			Element root = new Element("$message.getName()",ns);
		//	Element root = new Element("$message.getName()");
			#foreach ($namespace in $namespaces)
				root.addNamespaceDeclaration(Namespace.getNamespace("$namespace.getPrefix()", LLRPConstants.$namespace.getPrefix().toUpperCase()$ns));				
			#end
        	
			if (version == null){
				throw new InvalidLLRPMessageException("Version not set");
			} else {
				root.setAttribute("Version", version.toInteger().toString());
			}
			if (messageID == null){
				throw new InvalidLLRPMessageException("MessageID not set");
			} else {
				root.setAttribute("MessageID", messageID.toString(10));
			}
		
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			#if ($utility.hasType($field,$reservedDefinition))
				//root.addContent($resName$utility.getCurrentNumerOfReserved()$encodeXML("reserved",ns));
			#elseif ($utility.hasType($field,$fieldDefinition))
				## FieldDefinition
				if ($utility.firstToLowerCase($field.getName())== null){
					LOGGER.warn(" $utility.firstToLowerCase($field.getName()) not set");
					throw new MissingParameterException(" $utility.firstToLowerCase($field.getName()) not set");
				} else {
					root.addContent($utility.firstToLowerCase($field.getName())$encodeXML("$field.getName()",ns));
				}
			#else
				//TODO 4 template parameter encode wrote this - unexpected object $field $field.getName()
			#end
		#end
		## parameter or choice
		//parameters
		#foreach($field in $message.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
	
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			## check if it is a list 	
			#if ($field.getRepeat()==$mustListRepeat)
				if ($curName$list== null){
					LOGGER.warn(" $curName$list not set");
					throw new MissingParameterException("  $curName$list not set");
				} 
				for ($field.getType() field : $curName$list){
					##choices have to be set by the actual name - not the name of the interface
					root.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
				}
			#elseif ($field.getRepeat()== $optionalListRepeat)
				if ($curName$list == null){
					LOGGER.info("$curName$list not set");
				} else {
					for ($field.getType() field : $curName$list){
						root.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
					}
				}
			#elseif ($field.getRepeat()== $optionalRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
				} else {
					#if ($field.getName())
							// name was defined for this parameter - must use it to avoid confusion with parameters of same type
							root.addContent($curName$encodeXML("$curName",ns));
					#else
							root.addContent($curName$encodeXML($curName$getClassName,ns));
					#end
				}
			#elseif ($field.getRepeat()== $exactlyOnceRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
					throw new MissingParameterException("$curName not set");
				} else {
					#if ($field.getName())
							// name was defined for this parameter - must use it to avoid confusion with parameters of same type
							root.addContent($curName$encodeXML("$curName",ns));
					#else
							root.addContent($curName$encodeXML($curName$getClassName,ns));
					#end					
				}
			#else
				// TODO field.getRepeat() = $field.getRepeat()
			#end
		#end
		Document doc = new Document(root);
  		if (isValidXMLMessage(doc,LLRPConstants.LLRPMESSAGESCHEMAPATH)){
  				return doc;
  		} else {
  			return null;
  		}
  		
  		
  		}
		    	catch (IllegalArgumentException e) {
		    		throw new InvalidLLRPMessageException(e.getMessage());
		    	}
		    	catch (MissingParameterException e) {
		    		throw new InvalidLLRPMessageException(e.getMessage());
		    	}
		    	
  		
  		
  		
  		
	}
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  	
	
	
##decode
  
		/**
	 * {@inheritDoc}
	 */
	protected void decodeBinarySpecific(LLRPBitList binary) throws InvalidLLRPMessageException {
		int position = 0;
		int tempByteLength;
		int tempLength = 0;
		int count;
		SignedShort type;
		int fieldCount;
		Custom custom;
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				position+= $resName$utility.getCurrentNumerOfReserved()$length;
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")
				#else					
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				#if ($utility.isArray($curType))
					// array. first 16 bits indicate length of array
					fieldCount = new UnsignedShort(binary.subList(position, UnsignedShort.length())).toShort();			
					tempLength=$curType$length*fieldCount+UnsignedShort.length();
					$curName = new $curType (binary.subList(position, tempLength));
					position += tempLength;
					LOGGER.debug("decoding array of type: $curType with "+tempLength+" length");
					//might need padding
					// must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
					if (tempLength%8>0){
						position+=(8-tempLength%8);
						LOGGER.info("padding needed for $curName ");
					} 
				#elseif ($utility.isByteToEnd($curType))
					$curName = new $curType (binary.subList(position, binary.length()-position));
					position += binary.length()-position;

				#else
					$curName = new $curType (binary.subList(position, $curType$length));
					position += $curType$length;
				#end
			#else
						//TODO 5 template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $message.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			// list of parameters
			$curName$list = new LinkedList<$field.getType()>();
			LOGGER.debug("decoding parameter $curName$list ");
			while (position < binary.length()){
				// store if one parameter matched
				boolean atLeastOnce = false;
				// look ahead to see type
				// if first bit is one it is a TV Parameter
				if (binary.get(position)){
					// do not take the first bit as it is always 1
        			type = new SignedShort(binary.subList(position+1, 7));
				} else {
					type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
					tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
					tempLength=8*tempByteLength;
				}
				
				##distinguish between choices and parameters. For choices, we must find the actual types
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
							if(type != null && type.equals(Custom$typeNum)){
								Custom cus = new Custom(binary.subList(position,tempLength)); 
								//allowed custom parameters for this parameter	
								#foreach ($custom in $utility.allowedCustom($message.getName()))
									if (cus.getParameterSubtype().equals(new $custom ().$subtypeNr)){ 
										$curName$list$add (new $custom (cus));
										atLeastOnce = true;
										LOGGER.debug("adding $custom to $curName$list ");	
										position+=tempLength;
										atLeastOnce = true;
										continue;
									}
								#end	
								//end allowed parameters
								//if none matched continue wasn't called and we add just cus as we found no specific vendor implementation
								$curName$list$add (cus);
								position+=tempLength;
								atLeastOnce = true;
							}
						#else						
							if (type != null && type.equals($subtype$typeNum)){
								//if first bit is 1 it is a TV Parameter
								if (binary.get(position)){
									// length can statically be determined for TV Parameters
        							tempLength = $subtype$length;
								} 
								$curName$list$add (new $subtype (binary.subList(position,tempLength)));
								LOGGER.debug("adding $subtype to $curName$list ");
								position+=tempLength;
								atLeastOnce = true;
							}
						#end
						
					#end
					
					
				#elseif ($utility.isCustom($field.getType()))
							## custom parameter need separate treatment
							// custom
						if(type != null && type.equals(Custom$typeNum)){
							Custom cus = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($message.getName()))
								if (cus.getParameterSubtype().equals(new $custom ().$subtypeNr)){ 
									$curName$list$add (new $custom (cus));
									atLeastOnce = true;
									LOGGER.debug("adding $custom to $curName$list ");	
									position+=tempLength;
									atLeastOnce = true;
									continue;
								}
							#end	
							//end allowed parameters
							//if none matched continue wasn't called and we add just cus as we found no specific vendor implementation
							$curName$list$add (cus);
							position+=tempLength;
							atLeastOnce = true;
						}
				#elseif ($utility.hasType($field,$parameterReference))
					//add parameter to list if type number matches
					if (type != null && type.equals($field.getType()$typeNum)){
						//if first bit is 1 it is a TV Parameter
						if (binary.get(position)){
							// length can statically be determined for TV Parameters
	        				tempLength = $field.getType()$length;
						} 
						$curName$list$add (new $field.getType() (binary.subList(position,tempLength)));
						LOGGER.debug("adding $field.getType() to $curName$list ");
						atLeastOnce = true;	
						position+=tempLength;
					}
				#else
					//TODO 6 template wrote this in decode > list- unexpected object $field in while
				#end
				if (!atLeastOnce){
					//no parameter matched therefore we jump out of the loop
					break;
				}
			}
			#set($isEmpty = ".isEmpty()")
			#if ($field.getRepeat() == $mustListRepeat)
					//if list is still empty no parameter matched
					if ($curName$list$isEmpty){
						LOGGER.warn("encoded message does not contain parameter for non optional $curName$list");
						throw new InvalidLLRPMessageException("$message.getName() misses non optional parameter of type $field.getType()");
					}
				#else
					//if list is still empty no parameter matched
					if ($curName$list$isEmpty){
						LOGGER.info("encoded message does not contain parameter for optional $curName$list");
						
					}
			#end
		#elseif ($field.getRepeat()==$exactlyOnceRepeat || $field.getRepeat() == $optionalRepeat)
			## single parameter - must be set 
			// look ahead to see type
			// may be optional or exactly once
			type = null;
			tempByteLength = 0;			
			tempLength=0;
			
			try {
				// if first bit is one it is a TV Parameter
				if (binary.get(position)){
					// do not take the first bit as it is always 1
        			type = new SignedShort(binary.subList(position+1, 7));
				} else {
					type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
					tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
					tempLength=8*tempByteLength;
				}
			
			} catch (IllegalArgumentException le) {
				// if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
				## throw exception only when single Parameter - if it is optinal it is okay that it is not set
				#if ( $field.getRepeat() == $exactlyOnceRepeat)
					LOGGER.warn("$message.getName() misses non optional parameter of type $field.getType()");
					throw new InvalidLLRPMessageException("$message.getName() misses non optional parameter of type $field.getType()");
				#else
				##if it is optional, just inform that it is not set
					LOGGER.info("$message.getName() misses optional parameter of type $field.getType()");
				#end
			}
			##distinguish between choices and parameters. For choices, we must find the actual types
			#if ($utility.hasType($field,$choiceReference))
				##check all subtypes
				boolean found = false;
				LOGGER.debug("decoding choice type $field.getType() ");
				#foreach ($subtype in $utility.getSubTypes($field.getType()))
					//if first bit is 1 it is a TV Parameter
					
					if (binary.get(position)){
						// length can statically be determined for TV Parameters
        				tempLength = $subtype$length;
					} 
					#if ($utility.isCustom($subtype))
					## custom parameter need separate treatment
					// custom
						if(type != null && type.equals(Custom$typeNum)){
							Custom cus = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($message.getName()))
								if (cus.getParameterSubtype().equals(new $custom ().$subtypeNr)){ 
									$curName=new $custom (cus);
									atLeastOnce = true;
									LOGGER.debug("adding $custom to $curName$list ");	
									position+=tempLength;
									atLeastOnce = true;
									continue;
								}
							#end	
							//end allowed parameters
							//if none matched continue wasn't called and we add just use cus as custom parameter as we found no specific vendor implementation
							$curName =cus;
							position+=tempLength;
							found = true;
						}
					#else						
						if (type != null && type.equals($subtype$typeNum)){
							$curName = new $subtype (binary.subList(position,tempLength));
							LOGGER.debug(" $curName instatiated to $subtype with length "+tempLength);
							position += tempLength;
							found = true;
						}
					#end
				#end
				if (!found){
					#if ( $field.getRepeat() == $exactlyOnceRepeat)
					LOGGER.warn("encoded message misses non optional parameter $curName");
					throw new InvalidLLRPMessageException("$message.getName() misses non optional parameter of type $field.getType()");
					#else	
						##if it is optional, just inform that it is not set
						LOGGER.info("encoded message misses non optional parameter $curName");
					#end
				}
			#elseif ($utility.isCustom($field.getType()))
			    if(type != null && type.equals(Custom$typeNum)){
					## custom parameter need separate treatment
					// custom
					Custom cus = new Custom(binary.subList(position,tempLength)); 
					//allowed custom parameters for this parameter	
					#foreach ($custom in $utility.allowedCustom($message.getName()))
						if (cus.getParameterSubtype().equals(new $custom ().$subtypeNr)){ 
							$curName=new $custom (cus);
							atLeastOnce = true;
							position+=tempLength;
							continue;
						}
					#end	
					//end allowed parameters
					//if none matched continue wasn't called and we add just use cus as custom parameter as we found no specific vendor implementation
					if ($curName == null){
						$curName =cus;
						position+=tempLength;
						found = true;
					}
				}
				if (!found){
					#if ( $field.getRepeat() == $exactlyOnceRepeat)
						LOGGER.warn("$message.getName() misses non optional parameter of type $field.getType()");
						throw new InvalidLLRPMessageException("$message.getName() misses non optional parameter of type $field.getType()");
					#else	
						##if it is optional, just inform that it is not set
						LOGGER.info("$message.getName() misses optional parameter of type $field.getType()");
					#end
				}				
			#elseif ($utility.hasType($field,$parameterReference))
				if (binary.get(position)){
					// length can statically be determined for TV Parameters
        			tempLength = $curName$length;
				} 
				if(type != null && type.equals($field.getType()$typeNum)){
					$curName = new $field.getType() (binary.subList(position,tempLength));	
					position+=tempLength;
					LOGGER.debug(" $curName is instantiated with $field.getType() with length"+tempLength);
				} else {
					## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
					#if ( $field.getRepeat() == $exactlyOnceRepeat)
						LOGGER.warn("$message.getName() misses non optional parameter of type $field.getType()");
						throw new InvalidLLRPMessageException("$message.getName() misses non optional parameter of type $field.getType()");
					#else	
						##if it is optional, just inform that it is not set
						LOGGER.info("$message.getName() misses optional parameter of type $field.getType()");
					#end
				}	
			#end
		#else
			//TODO 7 template wrote this - unexpected object $field
		#end
	#end
  	}
  	
 
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  		
  	
  ## decode XML
		/**
	 * {@inheritDoc}
	 */
  	public void decodeXML(final Document document) throws InvalidLLRPMessageException {
		Element temp = null;
        Custom custom;
		// child element are always in default LLRP namespace
    	Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);
		
		try {

  		isValidXMLMessage(document,LLRPConstants.LLRPMESSAGESCHEMAPATH);
  		
        Element root = (Element) document.getRootElement().clone();
  		List<Element> tempList = null;
  	
  	    // the version field is always 3 bit long 
  	    // if the version attribute is not set in the LTK-XML message,
  	    // it is set to version 001
        String versionAttribute = root.getAttributeValue("Version");
                if (versionAttribute != null){
                    version = new BitList(3);
                	version.setValue(new Integer(versionAttribute));
                }
                else {
                    version = new BitList(0,0,1);
                }
        
        messageID = new UnsignedInteger(root.getAttributeValue("MessageID"));
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				##reserved, do nothing
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#elseif ($field.getFormat())
					#set ($firstF = $utility.convertType($field.getType().value()))
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")					
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				temp = root.getChild("$utility.firstToUpperCase($curName)",root.getNamespace());
				//check if this element exist
				if (temp != null){
					$curName = new $curType(temp);
				} else {
					LOGGER.warn("Element $curName not provided in xml as child of "+root.getName());
					throw new MissingParameterException("Element $curName not provided");
				}
				root.removeChild("$utility.firstToUpperCase($curName)",root.getNamespace());
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $message.getParameterOrChoice())
			## get name first, not all have a name attribute
			#if ($field.getName())
				#set ($curName = $field.getName())
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			#if ($utility.hasType($field,$parameterReference))
				//parameter - not choices - no special actions needed
				## check if it is a list 	
				#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
					//we expect a list of parameters
					$curName$list = new LinkedList<$field.getType()>();
					tempList = root.getChildren("$field.getType()",ns);
					
					#if ( $field.getRepeat() == $mustListRepeat)
						if (tempList == null || tempList.isEmpty() ){
							LOGGER.warn("$message.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$message.getName() misses non optional parameter of type $curName$list");
					#else
						##if it is optional, just inform that it is not set
						if (tempList == null || tempList.isEmpty() ){
							LOGGER.info("$message.getName() misses optional parameter of type $curName$list");
					#end						
					} else {
						for (Element e : tempList){
							$curName$list$add (new $field.getType()(e));
							LOGGER.debug("adding $field.getType() to $curName$list ");			
						}	
					}
					root.removeChildren("$field.getType()",ns);
					#if ($utility.isCustom($field.getType()))
						//custom parameter
						#foreach ($custom in $utility.allowedCustom($message.getName()))
							tempList = root.getChildren("$custom",ns);
							for (Element e: tempList){
								custom = new Custom(e); 
								$curName$list$add (new $custom (custom));
								LOGGER.debug("adding $custom to $curName$list ");
							}
							root.removeChildren("$custom",ns);
						#end
					//end custom
					#end					
				#else
					temp = root.getChild("$field.getType()",ns);
					#if ($utility.isCustom($field.getType()))
						// custom parameter may be null, check allowed types
						if (temp == null){
						//check allowed types
						#foreach ($custom in $utility.allowedCustom($message.getName()))
							temp = root.getChild("$custom",ns);
							if (temp != null){
								$curName =  new $custom (custom);
							}
							root.removeChild("$custom",ns);
						#end
						}
						// end custom
		             #end
		             if (temp != null){
		                 $curName = new $field.getType()(temp);
		                 LOGGER.info("setting parameter $curName for parameter $message.getName()");
		             } else {
		                  #if ( $field.getRepeat() == $exactlyOnceRepeat)
		                      LOGGER.warn("$message.getName() misses non optional parameter of type $curName");
		                      throw new MissingParameterException("$message.getName() misses non optional parameter of type $curName");
		                  #else
		                      ##if it is optional, just inform that it is not set
		                      LOGGER.info("$message.getName() misses optional parameter of type $curName");
		                  #end
		             }          
					root.removeChild("$field.getType()",ns);		
				#end
			#elseif ($utility.hasType($field,$choiceReference))
				//choices - must check all possible subtypes
				#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
					//list of Choice Type Parameter
					$curName$list = new LinkedList<$field.getType()>();
					// for each possible subtype get all childs
						##check all subtypes
						#foreach ($subtype in $utility.getSubTypes($field.getType()))
							#if ($utility.isCustom($subtype))
								## custom parameter need separate treatment
								// check for all custom parameters allowed for this parameter 
								#set($hasAllowed = "false")
								#foreach ($custom in $utility.allowedCustom($message.getName()))
									#set($hasAllowed = "true")
									tempList = root.getChildren("$custom",Namespace);
									for (Element e: tempList){
										custom = new Custom(e); 
										$curName$list$add (new $custom (custom));
										atLeastOnce = true;
										LOGGER.debug("adding $custom to $curName$list ");
									}
									root.removeChildren("$custom",ns);
								#end
								#if ($hasAllowed == "false")
									tempList = root.getChildren("Custom",ns);
									for (Element e: tempList){
										$curName$list$add (new Custom(e));
										LOGGER.debug("adding $field.getType() to $curName$list ");
									}
									root.removeChildren("Custom",ns);
									
								#end
								//end allowed parameters
							#else
								tempList = root.getChildren("$subtype",ns);
								for (Element e : tempList){
									$curName$list$add (new $subtype(e));
									LOGGER.debug("adding $subtype to $curName$list ");
									atLeastOnce = true;
								}
								root.removeChildren("$subtype",ns);
								
							#end
							
						#end
						if (!atLeastOnce){
							#if ( $field.getRepeat() == $mustListRepeat)
								LOGGER.warn("$message.getName() misses non optional parameter of type $curName$list");
								throw new MissingParameterException("$message.getName() misses non optional parameter of type $curName$list");
							#else
								LOGGER.info("$message.getName() misses optional parameter of type $curName$list");
							#end	
						}
						atLeastOnce = false;		
				#else
				
					##check all subtypes
					boolean found = false;
					LOGGER.debug("decoding choice type $field.getType() ");
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
							temp = root.getChild("$subtype",ns);
							if (temp != null){
								custom = new $field.getType() (temp));	
								#foreach ($custom in $utility.allowedCustom($field.getType()))
									if (temp.getName().equalsIgnoreCase("$custom")){ 
										$curName =new $custom (custom) ;
										LOGGER.debug(" $curName is instantiated with $custom ");
									}
								#end
							}
							root.removeChild("$subtype",ns);
						#else		
							// try to get child for each possible subtype
							temp = root.getChild("$subtype",ns);			
							if (temp != null){
								$curName = new $subtype (temp);
								LOGGER.debug(" $curName instatiated to $subtype with");
								found = true;
							} 
							root.removeChild("$subtype",ns);	
						#end
					#end
					if (!found){
						#if ( $field.getRepeat() == $mustListRepeat)
							LOGGER.warn("$message.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$message.getName() misses non optional parameter of type $curName$list");
						#else
						##if it is optional, just inform that it is not set
							LOGGER.info("$message.getName() misses optional parameter of type $curName$list");
						#end	
					}				
				
				#end
			#else
				//TODO 9 template wrote this in decode > list- unexpected object $field in while
			#end
		#end
	
		if (root.getChildren().size()>0){
			String message = "$message.getName() has unknown element "+((Element) root.getChildren().get(0)).getName();
			throw new InvalidLLRPMessageException(message);
		}
	}
	    	catch (IllegalArgumentException e) {
	    		throw new InvalidLLRPMessageException(e.getMessage());
	    	}
	    	catch (MissingParameterException e) {
	    		throw new InvalidLLRPMessageException(e.getMessage());
	    	}
	
	
	
  	}
  

 	  	
	
## generate setters 
	//setters
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
				#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $curType .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.firstToUpperCase($curType)  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $together .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $together $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * set   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()) .
				 * @param   $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.convertType($field.getType().value())  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#end
			
		#else
					//TODO 11 template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * set $curName$list of type  List &lt;$field.getType()>.
			 * @param  $curName$list to be set
			 */
			public void set$utility.firstToUpperCase($curName)$list (final List<$field.getType()> $curName$list) {
				this.$curName$list = $curName$list;
			}
				
		#else
			/**
			 * set $curName of type $field.getType().
			 * @param  $curName to be set
			 */
			public void set$utility.firstToUpperCase($curName) (final $field.getType() $curName)  {
				this.$curName = $curName;
			}
		#end
	#end
	// end setter
	
	## generate getters 
	//getters
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type $curType.
				 * @return  $curType
				 */
				public $utility.firstToUpperCase($curType) get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($together = "$firstF$secondF$thirdF")
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type  $together.
				 * @return  $together
				 */
				public  $together get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * get   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()).
				 * @return   type $utility.convertType($field.getType().value()) to be set
				 */
				public $utility.convertType($field.getType().value()) get$field.getName()$emptyBrack{
					return this.$utility.firstToLowerCase($field.getName());
				}
			#end
		#else
			//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * get $curName$list of type List &lt;$field.getType()> .
			 * @return  List &lt;$field.getType()>
			 */
			public List<$field.getType()> get$utility.firstToUpperCase($curName)$list$emptyBrack {
				return $curName$list;
			}
				
		#else
			/**
			 * get $curName of type $field.getType() .
			 * @return  $field.getType()
			 */
			public $field.getType() get$utility.firstToUpperCase($curName)$emptyBrack  {
				return $curName;
			}
		#end
	#end
	// end getters
##end getters	
	
   
	
## add methods
	 //add methods
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
			#if ($field.getName())
				#set($aName = $utility.firstToLowerCase($field.getName()))
				#set($curType = $field.getName())
			#else
				#set ($aName = $utility.firstToLowerCase($field.getType()))
				#set($curType = $field.getType())
			#end 

			#if ($utility.isArray($curType))
						
				/**
				 * add element of type $utility.arrayBaseType($curType) to $curType .
				 * @param  $utility.arrayBaseType($curType)
				 */
				public void addTo$curType ($utility.arrayBaseType($curType) element) {
					if (this.$aName == null){
						this.$aName = new $curType();
					} 
				 	this.$aName$add (element);
				}
			#end		
		## FieldDefinition
		#else
					//TODO 12 template wrote this - unexpected object $field
		#end	
	#end
  
  

  
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
				/**
				 * add element $curName of type $field.getType() .
				 * @param  $curName of type $field.getType() 
				 */
			public void addTo$utility.firstToUpperCase($curName)$list ($field.getType() $curName) {
				if (this.$curName$list == null){
					this.$curName$list = new LinkedList<$field.getType()>();
				} 
			 	this.$curName$list$add ($curName);
			}
				
		#end
	#end
	// end add
## end add	
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  		

	@Override
	public String getResponseType() {
		return RESPONSETYPE;
	}

	@Override
	public String getName() {
		return "$message.getName()";
	}

	/**
	* return uniuque type number.
	* @return SignedShort holding unique type number
	*/
	public SignedShort getTypeNum() {
		return TYPENUM;
	}
	
## end of Class	
}
