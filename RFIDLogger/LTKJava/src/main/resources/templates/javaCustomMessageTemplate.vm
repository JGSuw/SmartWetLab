## javaCustomMessageTemplate.vm
package org.llrp.ltk.generated.custom.messages;
	
/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
	
## some strings we need
#set($encode = ".encodeBinary()")	
#set($encodeXML = ".encodeXML")	
#set($list = "List")
#set($length = ".length()")
#set($resName = "reserved")
#set($resType = "BitList")
#set($typeNum = ".TYPENUM")
#set($add = ".add")
#set($emptyBrack = "()")	

##set the class names here
#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($messageDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")
#set ($mustListRepeat = "1-N")
#set ($exactlyOnceRepeat = "1")
#set ($optionalRepeat = "0-1")
#set ($optionalListRepeat = "0-N")
	
	
	
##imports
## must clear the helper set
$utility.clearImports()
## some imports are always needed
## remember imports to avoid importing twice the same

	import java.util.LinkedList;
	$utility.addImport("LinkedList")
	import java.util.List;
	$utility.addImport("List")
	
	import org.apache.log4j.Logger;
	$utility.addImport("LOGGER")
	
	import org.jdom.Document;
	$utility.addImport("document")
	import org.jdom.Element;
	$utility.addImport("element")
	import org.jdom.Namespace;
	$utility.addImport("Namespace")
	
	import org.llrp.ltk.generated.LLRPConstants;
	$utility.addImport("LLRPConstants")


	import org.llrp.ltk.types.SignedByte;
	$utility.addImport("SignedByte")	
	import org.llrp.ltk.types.LLRPBitList;
	$utility.addImport("LLRPBitList")	
	import org.llrp.ltk.types.LLRPMessage;
	$utility.addImport("LLRPMessage")
	import org.llrp.ltk.types.UTF8String;
	$utility.addImport("UTF8String")
	import org.llrp.ltk.types.SignedShort;
	$utility.addImport("SignedShort")
	import org.llrp.ltk.types.BitList;
	$utility.addImport("BitList")
	import org.llrp.ltk.types.UnsignedInteger;
	$utility.addImport("UnsignedInteger")
	import org.llrp.ltk.types.UnsignedShort;
	$utility.addImport("UnsignedShort")
	import org.llrp.ltk.types.UnsignedByte;
	$utility.addImport("UnsignedByte")
	import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
	$utility.addImport("InvalidLLRPMessageException")
	import org.llrp.ltk.exceptions.MissingParameterException;
	$utility.addImport("MissingParameterException")

	
	
	import org.llrp.ltk.generated.parameters.Custom;
	$utility.addImport("Custom")
	import org.llrp.ltk.generated.messages.CUSTOM_MESSAGE;
	$utility.addImport("Custom_MESSAGE")
		
	##custom parameters
	#foreach ($custom in $utility.allowedCustom($message.getName()))
	import org.llrp.ltk.generated.custom.parameters.$custom;
	$utility.addImport($custom)
	#end
	
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			#if (!$utility.hasImport($resType))
				import org.llrp.ltk.types.$resType;
				$utility.addImport($resType)
			#end
		#elseif ($utility.hasType($field,$fieldDefinition))
			## its a field and therefore it might be also an enumeration
			## only place where we can find super types of enumerations
			#if ($field.getEnumeration() && !$utility.isCustomEnumeration($field.getEnumeration()))
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$field.getEnumeration()")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType().value())
						$utility.addImport($together)
						import org.llrp.ltk.generated.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.enumerations.$field.getEnumeration();
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getEnumeration() && $utility.isCustomEnumeration($field.getEnumeration()))
				#set($enum =  $utility.firstToUpperCase($field.getEnumeration()))
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$enum")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType().value())
						$utility.addImport($together)
						import org.llrp.ltk.generated.custom.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.custom.enumerations.$enum;
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				#if (!$utility.hasImport($together))
					import org.llrp.ltk.types.$together;
					$utility.addImport($together)
				#end
			#elseif (!$utility.hasImport($utility.convertType($field.getType().value())))
				import org.llrp.ltk.types.$utility.convertType($field.getType().value());
				$utility.addImport($utility.convertType($field.getType().value()))
			#end
		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end
	
	
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		##for choices we must also import implementing classes
		#if ($utility.hasType($field,$choiceReference))
			##check all subtypes
			#foreach ($subtype in $utility.getSubTypes($field.getType()))
				#if (!$utility.hasImport($subtype) && $utility.isCustomParameter($subtype))
					import org.llrp.ltk.generated.custom.parameters.$subtype;
					$utility.addImport($subtype)
				#elseif (!$utility.hasImport($subtype) && !$utility.isCustomParameter($subtype))
					import org.llrp.ltk.generated.parameters.$subtype;
					$utility.addImport($subtype)
				#end
			#end
			#if ($utility.isCustomChoice($field.getType()))
				import org.llrp.ltk.generated.custom.interfaces.$field.getType();
				$utility.addImport($field.getType())
			#else 
				import org.llrp.ltk.generated.interfaces.$field.getType();
				$utility.addImport($field.getType())
			#end
		#else
			#if (!$utility.hasImport($field.getType()) && $utility.isCustomParameter($field.getType()))
				import org.llrp.ltk.generated.custom.parameters.$field.getType();
				$utility.addImport($field.getType())
			#elseif (!$utility.hasImport($field.getType()) && !$utility.isCustomParameter($field.getType()))
				import org.llrp.ltk.generated.parameters.$field.getType();
				$utility.addImport($field.getType())
			#end
		#end
	#end
	
	##import interfaces to implement
	#foreach ($interface in $utility.getInterfaces($message.getName()))

			#if ($utility.isCustomChoice($interface))
				import org.llrp.ltk.generated.custom.interfaces.$interface;
				$utility.addImport($interface)
			#else 
				import org.llrp.ltk.generated.interfaces.$interface;
				$utility.addImport($interface)
			#end
	#end
##end imports

	
	
		
/**
 * $utility.getAnnotation($message)
 */




## beginning of class
public class $message.getName() extends LLRPMessage {						

##typeNum is always needed
	public static final UTF8String vendor = new UTF8String("$message.getVendor()");
	public static final UnsignedByte subtype = new UnsignedByte((new Integer($message.getSubtype())).byteValue());
	public static final UnsignedInteger vendorIdentifier = new UnsignedInteger($vendorID);
	#set($class = ".class")
	private static final Logger LOGGER = Logger.getLogger($message.getName()$class);
	#if ($message.getResponseType())
		public static final String RESPONSETYPE = "$message.getResponseType()";
	#else 
		public static final String RESPONSETYPE = "";
	#end
	private SignedByte messageSubtype;
	
## field or reserved
#foreach($field in $message.getFieldOrReserved())
	## reserved field
	#if ($utility.hasType($field,$reservedDefinition))
		protected $resType $resName$utility.getCurrentNumerOfReserved() = new $resType ($field.getBitCount());
	#elseif ($utility.hasType($field,$fieldDefinition))
		#if ($field.getEnumeration())
			#if ($utility.isArray($utility.convertType($field.getType().value())))
				#set ($arr = "Array")
			#else
				#set ($arr = "")
			#end
			#set ($anEnum = $utility.firstToUpperCase($field.getEnumeration()))		
			protected $anEnum$arr $utility.firstToLowerCase($field.getName());
		#elseif ($field.getFormat())
			#set ($firstF = "$utility.convertType($field.getType().value())")
			#set ($secondF = "_")
			#set ($thirdF = "$field.getFormat()")
			protected $firstF$secondF$thirdF $utility.firstToLowerCase($field.getName()); 
		#else
			protected $utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName());
		#end
	## FieldDefinition
	#else
				//TODO 2 template wrote this - unexpected object $field
	#end	
#end
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 


## constructor
	public $message.getName()(){
	}


	public $message.getName()(LLRPBitList list) throws InvalidLLRPMessageException {
		decodeBinary(list.toByteArray());
	}

	public $message.getName()(byte[] byteArray) throws InvalidLLRPMessageException {
		decodeBinary(byteArray);
	}
		
	public $message.getName()(Document document) throws InvalidLLRPMessageException {
		decodeXML(document);
	}
	
## parameter or choice
#foreach($field in $message.getParameterOrChoice())
	## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
	## however there are some exceptions to this where there is a name given

	#if ($field.getName())
		#set ($curName = $utility.firstToLowerCase($field.getName()))
	#else
		#set ($curName = $utility.firstToLowerCase($field.getType()))
	#end 	
	#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
		private List<$field.getType()> $curName$list = new LinkedList<$field.getType()>();
	#else
		private $field.getType() $curName;
	#end
#end



## encode method
	public LLRPBitList encodeBinarySpecific(){
	LLRPBitList resultBits = new LLRPBitList();
	
	//vendor and type encoded first
	resultBits.append(vendorIdentifier.encodeBinary());
	resultBits.append(subtype.encodeBinary());
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		#if ($utility.hasType($field,$reservedDefinition))
			resultBits.append($resName$utility.getCurrentNumerOfReserved()$encode);
		#elseif ($utility.hasType($field,$fieldDefinition))
			resultBits.append($utility.firstToLowerCase($field.getName())$encode);
		## FieldDefinition
		#else
			//TODO template parameter encode wrote this - unexpected object $field
		#end
	#end
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
		## however there are some exceptions to this where there is a name given

		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			for ($field.Type field : $curName$list){
				resultBits.append(field$encode);
			}
		#else
			resultBits.append($curName$encode);
		#end
	#end
		return resultBits;
	}
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved()



##decode
  
  	@Override
	public void decodeBinarySpecific(LLRPBitList binary){
		int position = 0;
		int tempByteLength;
		int tempLength = 0;
		int count;
		int fieldCount;
		SignedShort type;
		

		// do not have to decode vendor identifier
        position += UnsignedInteger.length();
        messageSubtype = new SignedByte(binary.subList(position,
                    SignedByte.length()));
        position += SignedByte.length();
        		
		
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				position+= $resName$utility.getCurrentNumerOfReserved()$length;
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")
				#else					
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				#if ($utility.isArray($curType))
					// array. first 16 bits indicate length of array
					fieldCount = new UnsignedShort(binary.subList(position, UnsignedShort.length())).toShort();			
					tempLength=$curType$length*fieldCount+UnsignedShort.length();
					$curName = new $curType (binary.subList(position, tempLength));
					position += tempLength;
					LOGGER.debug("decoding array of type: $curType with "+tempLength+" length");
					//might need padding
					// must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
					if (tempLength%8>0){
						position+=(8-tempLength%8);
						LOGGER.info("padding needed for $curName ");
					} 
				#elseif ($utility.isByteToEnd($curType))
					$curName = new $curType (binary.subList(position, binary.length()-position));
					position += binary.length()-position;

				#else
					$curName = new $curType (binary.subList(position, $curType$length));
					position += $curType$length;
				#end
			#else
						//TODO 5 template wrote this - unexpected object $field
			#end
		#end  
		
		
		
		## parameter or choice
		#foreach($field in $message.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			$curName$list = new LinkedList<$field.getType()>();
			while (position < binary.length()){
				// look ahead to see type
				type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
				tempByteLength = new UnsignedShort(binary.subList(position+TYPENUMBERLENGTH+RESERVEDLENGTH, UnsignedShort.length())).toShort();			
				tempLength=8*tempByteLength;
				##distinguish between choices and parameters. For choices, we must find the actual types
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						if (type.equals($subtype$typeNum)){
							$curName$list$add (new $subtype (binary.subList(position,tempLength)));
							position+=tempLength;
							continue;
						}
					#end
					//if no parameter matched, jump out of while loop
					break;
				#elseif ($utility.hasType($field,$parameterReference))
					//paramRef
					$curName$list$add (new $field.getType() (binary.subList(position,tempLength)));
					position+=tempLength;		
				#else
					//TODO template wrote this in decode > list- unexpected object $field in while
				#end
			}
			


		#elseif ($field.getRepeat()==$exactlyOnceRepeat || $field.getRepeat()==$optionalRepeat)
			##may be optional or exactly once
			// look ahead to see type
			// may be optional or exactly once
				if (binary.get(position)){
					// do not take the first bit as it is always 1
        			type = new SignedShort(binary.subList(position+1, 7));
				} else {
					type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
				}
			tempByteLength = new UnsignedShort(binary.subList(position+TYPENUMBERLENGTH+RESERVEDLENGTH, UnsignedShort.length())).toShort();			
			tempLength=8*tempByteLength;
			##distinguish between choices and parameters. For choices, we must find the actual types
			#if ($utility.hasType($field,$choiceReference))
				##check all subtypes
				#foreach ($subtype in $utility.getSubTypes($field.getType()))
					//if first bit is 1 it is a TV Parameter
					if (binary.get(position)){
						// length can statically be determined for TV Parameters
        				tempLength = $subtype$length;
					} 
					if (typeNum.equals($subtype$typeNum)){
						$curName = new $subtype (binary.subList(position,tempLength));
					}
					position += tempLength;
				#end
			
			#elseif ($utility.hasType($field,$parameterReference))
				if (binary.get(position)){
					// length can statically be determined for TV Parameters
        			tempLength = $curName$length;
				} 
				if(type.equals($field.getType()$typeNum)){
					$curName = new $field.getType() (binary.subList(position,tempLength));	
					position+=tempLength;
				} else {
				## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
					#if ($field.getRepeat()==$exactlyOnceRepeat )
						// its an error - parameter must be here
						throw new MissingParameterException("parameter expected: $field.getType() but recieved " + type );
					#else
						LOGGER.info("parameter "+$curName +" not set");
					#end
				}	
			#else
				//TODO template wrote this - unexpected object $field
			#end
		#else
			// TODO repeat is $field.getRepeat() but this is not yet implemented
		#end
	#end
  	}
  	
  	
	
  ## decode XML
		/**
	 * {@inheritDoc}
	 */
  	public void decodeXML(final Document document) throws InvalidLLRPMessageException {
  		try{
  		
  		#set($path = "MESSAGESCHEMAPATH")
  		isValidXMLMessage(document,LLRPConstants.$message.getVendor().toUpperCase()$path);
  		
  		Element root = document.getRootElement();
  		List<Element> tempList = null;
  		
 	    // the version field is always 3 bit long 
  	    // if the version attribute is not set in the LTK-XML message,
  	    // it is set to version 001
        String versionAttribute = root.getAttributeValue("Version");
                if (versionAttribute != null){
                    version = new BitList(3);
                	version.setValue(new Integer(versionAttribute));
                }
                else {
                    version = new BitList(0,0,1);
                }

        messageID = new UnsignedInteger(root.getAttributeValue("MessageID"));
  		Element temp = null;
  		## vendor Identifier has not to be decoded
  		

           
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				##reserved, do nothing
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#elseif ($field.getFormat())
					#set ($firstF = $utility.convertType($field.getType().value()))
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")					
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				temp = root.getChild("$utility.firstToUpperCase($curName)",root.getNamespace());
				//check if this element exist
				if (temp != null){
					$curName = new $utility.firstToUpperCase($curType)(temp);
				} else {
					LOGGER.warn("Element $curName not provided in xml as child of "+root.getName());
					throw new MissingParameterException("Element $curName not provided");
				}
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $message.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			$curName$list = new LinkedList<$field.getType()>();
			tempList = root.getChildren("$field.getType()",root.getNamespace());
			for (Element e : tempList){
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						if (e.getName().equalsIgnoreCase("$subtype")){
							$curName$list$add (new $subtype (e));
							continue;
						}
					#end
					//if no parameter matched, jump out of while loop
					break;
				#elseif ($utility.hasType($field,$parameterReference))
					//paramRef
					$curName$list$add (new $field.getType() (e));	
				#else
					//TODO template wrote this in decode > list- unexpected object $field in while
				#end
			}
			


		#elseif ($field.getRepeat()==$exactlyOnceRepeat || $field.getRepeat()==$optionalRepeat)
			##may be optional or exactly once
			// may be optional or exactly once
			#if ($utility.hasType($field,$choiceReference))
				##check all subtypes
				#foreach ($subtype in $utility.getSubTypes($field.getType()))
					// try to get the element of name $field.getType()
					temp = root.getChild("$subtype",root.getNamespace());
					// if it exists - we can instantiate it
					if (temp != null){
						$curName = new $subtype (temp);
					}
				#end
			
			#elseif ($utility.hasType($field,$parameterReference))
				temp = root.getChild("$field.getType()",root.getNamespace());
				if(temp != null){
					$curName = new $field.getType()(temp);
				} else {
				## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
					#if ($field.getRepeat()==$exactlyOnceRepeat )
						// its an error - parameter must be here
						throw new MissingParameterException("parameter expected: $field.getType() but received $field.getType()");
					#else
						LOGGER.info("parameter "+$curName +" not set");
					#end
				}	
			#else
				//TODO template wrote this - unexpected object $field
			#end
		#else
			// TODO repeat is $field.getRepeat() but this is not yet implemented
		#end
	#end
  	
  	}
	catch (IllegalArgumentException e) {
		throw new InvalidLLRPMessageException(e.getMessage());
		}
	catch (MissingParameterException e) {
		throw new InvalidLLRPMessageException(e.getMessage());
	    	}
  	
  	}
  
  	
## encode xml
		/**
	 * {@inheritDoc}
	 */
	public Document encodeXML() throws InvalidLLRPMessageException {
	
			try{
	
	
			#set($ns = "NAMESPACE")
			Namespace ns = Namespace.getNamespace("$message.getVendor()",LLRPConstants.$message.getVendor().toUpperCase()$ns);
			Element root = new Element("$message.getName()",ns);
       		#foreach ($namespace in $namespaces)
				root.addNamespaceDeclaration(Namespace.getNamespace("$namespace.getPrefix()", LLRPConstants.$namespace.getPrefix().toUpperCase()$ns));				
			#end
        	//root.addNamespaceDeclaration(Namespace.getNamespace("xsi",LLRPConstants.XMLENCODINGSCHEMA));
        
			if (version == null){
				throw new MissingParameterException("Version not set");
			} else {
				root.setAttribute("Version", version.toInteger().toString());
			}
			if (messageID == null){
				throw new MissingParameterException("MessageID not set");
			} else {
				root.setAttribute("MessageID", messageID.toString(10));
			}
		  
		
		## field or reserved
		#foreach($field in $message.getFieldOrReserved())
			## "reserved" does not get encoded as elements in LTK-XML only fields
			#if ($utility.hasType($field,$fieldDefinition))
				## FieldDefinition
				if ($utility.firstToLowerCase($field.getName())== null){
					LOGGER.warn(" $utility.firstToLowerCase($field.getName()) not set");
					throw new MissingParameterException(" $utility.firstToLowerCase($field.getName()) not set");
				} else {
					root.addContent($utility.firstToLowerCase($field.getName())$encodeXML("$field.getName()",ns));
				}
			#else
				// $field has been skipped
			#end
		#end
		## parameter or choice
		//parameters
		#foreach($field in $message.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
	
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			## check if it is a list 	
			#if ($field.getRepeat()==$mustListRepeat)
				if ($curName$list== null){
					LOGGER.warn(" $curName$list not set");
					throw new MissingParameterException("  $curName$list not set");
				} 
				for ($field.getType() field : $curName$list){
					##choices have to be set by the actual name - not the name of the interface
					root.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
				}
			#elseif ($field.getRepeat()== $optionalListRepeat)
				if ($curName$list == null){
					LOGGER.info("$curName$list not set");
				} else {
					for ($field.getType() field : $curName$list){
						root.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
					}
				}
			#elseif ($field.getRepeat()== $optionalRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
				} else {
					#set($getSimpleName = ".getClass().getSimpleName()")
					root.addContent($curName$encodeXML($curName$getSimpleName,ns));
				}
			#elseif ($field.getRepeat()== $exactlyOnceRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
					throw new MissingParameterException("$curName not set");
				} else {
					#set($getSimpleName = ".getClass().getSimpleName()")
					root.addContent($curName$encodeXML($curName$getSimpleName,ns));
				}
			#else
				// TODO field.getRepeat() = $field.getRepeat()
			#end
		#end
		Document doc = new Document(root);
		
			#set($ns = "NAMESPACE")
  			#set($path = "MESSAGESCHEMAPATH")
  		if (isValidXMLMessage(doc,LLRPConstants.$message.getVendor().toUpperCase()$path)){
  				return doc;
  		} else {
  			return null;
  		}
  		
  		}
			catch (IllegalArgumentException e) {
				throw new InvalidLLRPMessageException(e.getMessage());
				}
			catch (MissingParameterException e) {
				throw new InvalidLLRPMessageException(e.getMessage());
		    	}
  		
	}
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	
  	
  	  	
	
## generate setters 
	//setters
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $field.getEnumeration() .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.firstToUpperCase($field.getEnumeration())  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $together .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $together $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * set   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()) .
				 * @param   $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.convertType($field.getType().value())  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#end
			
		#else
					//TODO 11 template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * set $curName$list of type  List &lt;$field.getType()>.
			 * @param  $curName$list to be set
			 */
			public void set$utility.firstToUpperCase($curName)$list (final List<$field.getType()> $curName$list) {
				this.$curName$list = $curName$list;
			}
				
		#else
			/**
			 * set $curName of type $field.getType().
			 * @param  $curName to be set
			 */
			public void set$utility.firstToUpperCase($curName) (final $field.getType() $curName)  {
				this.$curName = $curName;
			}
		#end
	#end
	// end setter
	
	## generate getters 
	//getters
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type $curType.
				 * @return  $curType
				 */
				public $utility.firstToUpperCase($curType) get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($together = "$firstF$secondF$thirdF")
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type  $together.
				 * @return  $together
				 */
				public  $together get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * get   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()).
				 * @return   type $utility.convertType($field.getType().value()) to be set
				 */
				public $utility.convertType($field.getType().value()) get$field.getName()$emptyBrack{
					return this.$utility.firstToLowerCase($field.getName());
				}
			#end
		#else
			//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * get $curName$list of type List &lt;$field.getType()> .
			 * @return  List &lt;$field.getType()>
			 */
			public List<$field.getType()> get$utility.firstToUpperCase($curName)$list$emptyBrack {
				return $curName$list;
			}
				
		#else
			/**
			 * get $curName of type $field.getType() .
			 * @return  $field.getType()
			 */
			public $field.getType() get$utility.firstToUpperCase($curName)$emptyBrack  {
				return $curName;
			}
		#end
	#end
	// end getters
##end getters	
	
   
	
## add methods
	 //add methods
	## field or reserved
	#foreach($field in $message.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
			#if ($field.getName())
				#set($aName = $utility.firstToLowerCase($field.getName()))
				#set($curType = $field.getName())
			#else
				#set ($aName = $utility.firstToLowerCase($field.getType()))
				#set($curType = $field.getType())
			#end 

			#if ($utility.isArray($curType))
						
				/**
				 * add element of type $utility.arrayBaseType($curType) to $curType .
				 * @param  $utility.arrayBaseType($curType)
				 */
				public void addTo$curType ($utility.arrayBaseType($curType) element) {
					if (this.$aName == null){
						this.$aName = new $curType();
					} 
				 	this.$aName$add (element);
				}
			#end		
		## FieldDefinition
		#else
					//TODO 12 template wrote this - unexpected object $field
		#end	
	#end
  
  

  
	## parameter or choice
	#foreach($field in $message.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
				/**
				 * add element $curName of type $field.getType() .
				 * @param  $curName of type $field.getType() 
				 */
			public void addTo$utility.firstToUpperCase($curName)$list ($field.getType() $curName) {
				if (this.$curName$list == null){
					this.$curName$list = new LinkedList<$field.getType()>();
				} 
			 	this.$curName$list$add ($curName);
			}
				
		#end
	#end
	// end add
## end add	
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved() 	


	@Override
	public String getResponseType() {
		return RESPONSETYPE;
	}

	@Override
	public String getName() {
		return "$message.getName()";
	}
	
	@Override
	public SignedShort getTypeNum() {
		return new SignedShort(1023);
	}
	
	public SignedByte getMessageSubtype(){
		return messageSubtype;
	}
	
## end of Class	
}
