## javaCustomParameterTemplate.vm
package org.llrp.ltk.generated.custom.parameters;

/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */


## remember where this parameter is allowed in - use utility to store this information
	#foreach ($allowedIn in $custom.getAllowedIn())
		$utility.addAllowedIn($allowedIn.getType(), $custom.getName())
		$utility.addPrefixForParameter($custom.getName(), $custom.getNamespace())
	#end

	
	
## some strings we need
#set($encode = ".encodeBinary()")
#set($encodeXML = ".encodeXML")		
#set($list = "List")
#set($length = ".length()")
#set($resName = "reserved")
#set($resType = "BitList")
#set($typeNum = ".TYPENUM")
#set($subtypeNr = ".PARAMETER_SUBTYPE")
#set($add = ".add")
#set($emptyBrack = "()")
#set($getClassName = ".getClass().getSimpleName()")

##set the class names here
#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($parameterDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")
#set ($mustListRepeat = "1-N")
#set ($exactlyOnceRepeat = "1")
#set ($optionalRepeat = "0-1")
#set ($optionalListRepeat = "0-N")
	
	

	
##imports
## must clear the helper set
$utility.clearImports()
## some imports are always needed
## remember imports to avoid importing twice the same

	import java.util.LinkedList;
	$utility.addImport("LinkedList")
	import java.util.List;
	$utility.addImport("List")
	import org.apache.log4j.Logger;
	$utility.addImport("logging")
	

	import org.jdom.Document;
	$utility.addImport("document")
	import org.jdom.Element;
	$utility.addImport("element")
	import org.jdom.Content;
	$utility.addImport("content")
	import org.jdom.Namespace;
	$utility.addImport("Namespace")
	
	import org.llrp.ltk.types.LLRPBitList;
	$utility.addImport("LLRPBitList")
	import org.llrp.ltk.types.LLRPMessage;
	$utility.addImport("LLRPMessage")
	import org.llrp.ltk.types.SignedShort;
	$utility.addImport("SignedShort")
	import org.llrp.ltk.types.UnsignedShort;
	$utility.addImport("UnsignedShort")
	import org.llrp.ltk.types.UnsignedInteger;
	$utility.addImport("UnsignedInteger")
import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
	$utility.addImport("InvalidLLRPMessageException")
	import org.llrp.ltk.exceptions.MissingParameterException;
	$utility.addImport("MissingParameterException")
	import org.llrp.ltk.types.TLVParameter;
	$utility.addImport("TLVParameter")
	import org.llrp.ltk.types.TVParameter;
	$utility.addImport("TVParameter")
	import org.llrp.ltk.generated.LLRPConstants;
	$utility.addImport("LLRPConstants")
		
	import org.llrp.ltk.generated.parameters.Custom;
	$utility.addImport("Custom")
	
	
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			#if (!$utility.hasImport($resType))
				import org.llrp.ltk.types.$resType;
				$utility.addImport($resType)
			#end
		#elseif ($utility.hasType($field,$fieldDefinition))
			## its a field and therefore it might be also an enumeration
			## only place where we can find super types of enumerations
			## distinguish between custom and normal enumerations
			#if ($field.getEnumeration() && !$utility.isCustomEnumeration($field.getEnumeration()))
				#set($enum =  $utility.firstToUpperCase($field.getEnumeration()))													
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$enum")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType())
						$utility.addImport($together)
						import org.llrp.ltk.generated.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.enumerations.$field.getEnumeration();
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getEnumeration() && $utility.isCustomEnumeration($field.getEnumeration()))
				#set($enum =  $utility.firstToUpperCase($field.getEnumeration()))									
				#if ($utility.isArray($utility.convertType($field.getType().value())))
					#set ($arr = "Array")
					#set ($type = "$enum")
					#set ($together = "$type$arr")
					#if (!$utility.hasImport($together))
						$utility.setSuperType($together,$field.getType().value())
						$utility.addImport($together)
						import org.llrp.ltk.generated.custom.enumerations.$together;
					#end
				#else
					#if (!$utility.hasImport($field.getEnumeration()))
						$utility.setSuperType($field.getEnumeration(),$field.getType().value())
						import org.llrp.ltk.generated.custom.enumerations.$enum;
						$utility.addImport($field.getEnumeration())
					#end
				#end
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				#if (!$utility.hasImport($together))
					import org.llrp.ltk.types.$together;
					$utility.addImport($together)
				#end
			#elseif (!$utility.hasImport($utility.convertType($field.getType().value())))
				import org.llrp.ltk.types.$utility.convertType($field.getType().value());
				$utility.addImport($utility.convertType($field.getType().value()))
			#end
		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end
	
	
	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		##for choices we must also import implementing classes
		#if ($utility.hasType($field,$choiceReference))
			##check all subtypes
			#foreach ($subtype in $utility.getSubTypes($field.getType()))
				#if (!$utility.hasImport($subtype) && $utility.isCustomParameter($subtype))
					import org.llrp.ltk.generated.custom.parameters.$subtype;
					$utility.addImport($subtype)
				#elseif (!$utility.hasImport($subtype) && !$utility.isCustomParameter($subtype))
					import org.llrp.ltk.generated.parameters.$subtype;
					$utility.addImport($subtype)
				#end
			#end
			#if ($utility.isCustomChoice($field.getType()))
				import org.llrp.ltk.generated.custom.interfaces.$field.getType();
				$utility.addImport($field.getType())
			#else 
				import org.llrp.ltk.generated.interfaces.$field.getType();
				$utility.addImport($field.getType())
			#end
		#else
			#if (!$utility.hasImport($field.getType()) && $utility.isCustomParameter($field.getType()))
				import org.llrp.ltk.generated.custom.parameters.$field.getType();
				$utility.addImport($field.getType())
			#elseif (!$utility.hasImport($field.getType()) && !$utility.isCustomParameter($field.getType()))
				import org.llrp.ltk.generated.parameters.$field.getType();
				$utility.addImport($field.getType())
			#end
		#end
	#end
		##import interfaces to implement
	#foreach ($interface in $utility.getInterfaces($custom.getName()))
	
			#if ($utility.isCustomChoice($interface))
				import org.llrp.ltk.generated.custom.interfaces.$interface;
				$utility.addImport($interface)
			#else 
				import org.llrp.ltk.generated.interfaces.$interface;
				$utility.addImport($interface)
			#end
	#end
##end imports


##set interfaces
#set ($interfaces = "")
#set ($first = true)
#foreach ($interface in $utility.getInterfaces($custom.getName()))
	#if ($first)
		#set ($interfaces = "implements $interface")
		#set ($first = false)
	#else
		#set ($interfaces = "$interfaces, $interface")
	#end
#end
/**
 * $utility.getAnnotation($custom)
 */
## beginning of class
public class $custom.getName() extends Custom $interfaces{


	public static final int PARAMETER_SUBTYPE = $custom.getSubtype();


##need always a logging
	#set($class = ".class")
	private static final Logger LOGGER = Logger.getLogger($custom.Name$class);

## field or reserved
#foreach($field in $custom.getFieldOrReserved())
	## reserved field
	#if ($utility.hasType($field,$reservedDefinition))
		private $resType $resName$utility.getCurrentNumerOfReserved() = new $resType ($field.getBitCount());
	#elseif ($utility.hasType($field,$fieldDefinition))
		#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
			protected $utility.firstToUpperCase($curType) $utility.firstToLowerCase($field.getName());
		#elseif ($field.getFormat())
			#set ($firstF = "$utility.convertType($field.getType().value())")
			#set ($secondF = "_")
			#set ($thirdF = "$field.getFormat()")
			protected $firstF$secondF$thirdF $utility.firstToLowerCase($field.getName()); 
		#else
			protected $utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName());
		#end
	## FieldDefinition
	#else
				//TODO template wrote this - unexpected object $field
	#end	
#end

##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved()


## parameter or choice
#foreach($field in $custom.getParameterOrChoice())
	## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
	## however there are some exceptions to this where there is a name given

	#if ($field.getName())
		#set ($curName = $utility.firstToLowerCase($field.getName()))
	#else
		#set ($curName = $utility.firstToLowerCase($field.getType()))
	#end 	
	#if ($field.getRepeat()== $mustListRepeat || $field.getRepeat()== $optionalListRepeat)
		private List<$field.getType()> $curName$list = new LinkedList<$field.getType()>();
	#else
		private $field.getType() $curName;
	#end
#end

## constructors

/**
 * empty constructor to create new parameter.
 */
	public $custom.getName()(){
	
## vendorIdentifier and parameterSubtype do get encoded by default	
		vendorIdentifier = new UnsignedInteger($vendorID);
		parameterSubtype = new UnsignedInteger($custom.getSubtype());
	}

/**
 * Constructor to create parameter from binary encoded parameter
 * calls decodeBinary to decode parameter.
 * @param list to be decoded
 */
	public $custom.getName()(LLRPBitList list){
		decodeBinary(list);
	}

/**
 * Constructor to create parameter from xml encoded parameter
 * calls decodeXML to decode parameter.
 * @param xml element to be decoded
 */
	public $custom.getName()(Element element)  throws InvalidLLRPMessageException {
	    vendorIdentifier = new UnsignedInteger($vendorID);
	    parameterSubtype = new UnsignedInteger($custom.getSubtype());
		decodeXML(element);
	}
	
/**
 * Constructor to create this parameter from custom parameter
 * @param custom
 */
	public $custom.getName()(Custom custom){
		decodeBinary(custom.encodeBinary());
	}
	
	
## encode method
	public LLRPBitList encodeBinarySpecific(){
	LLRPBitList resultBits = new LLRPBitList();
	## inherited from custom - must also be encoded
	if (vendorIdentifier== null){
		LOGGER.warn(" vendorIdentifier not set");
	} 
	resultBits.append(vendorIdentifier.encodeBinary());
	if (parameterSubtype== null){
		LOGGER.warn(" parameterSubtype not set");
	} 
			resultBits.append(parameterSubtype.encodeBinary());
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		#if ($utility.hasType($field,$reservedDefinition))
			resultBits.append($resName$utility.getCurrentNumerOfReserved()$encode);
		#elseif ($utility.hasType($field,$fieldDefinition))
			if ($utility.firstToLowerCase($field.getName())== null){
				LOGGER.warn(" $utility.firstToLowerCase($field.getName()) not set");
			} 
			resultBits.append($utility.firstToLowerCase($field.getName())$encode);
		## FieldDefinition
		#else
			//TODO template parameter encode wrote this - unexpected object $field
		#end
	#end
	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
		## however there are some exceptions to this where there is a name given

		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			if ($curName$list== null){
				LOGGER.info(" $curName$list not set");
			} 
			for ($field.Type field : $curName$list){
				resultBits.append(field$encode);
			}
		#elseif ($field.getRepeat()==$optionalRepeat)
			if ($curName != null){
				// optional parameter, may be null
				LOGGER.info(" $curName not set");
				resultBits.append($curName$encode);
			} 
		#else
			if ($curName == null){
				LOGGER.warn(" $curName not set");
			} 
			resultBits.append($curName$encode);
		#end
	#end
		return resultBits;
	}
##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved()


## encode xml
		/**
	 * {@inheritDoc}
	 */
	public Content encodeXML(String name, Namespace ns){
		#set($ns = "NAMESPACE")
		// element not in namespace defined by parents
		ns = Namespace.getNamespace("$custom.getNamespace()",LLRPConstants.$custom.getNamespace().toUpperCase()$ns);
		Element element = new Element(name, ns);
        ## field or reserved
		// fileds are alway in parent namespace 
		#foreach($field in $custom.getFieldOrReserved())
			#if ($utility.hasType($field,$reservedDefinition))
				//element.addContent($resName$utility.getCurrentNumerOfReserved()$encodeXML("reserved",ns));
			#elseif ($utility.hasType($field,$fieldDefinition))
				## FieldDefinition
				if ($utility.firstToLowerCase($field.getName())== null){
					LOGGER.warn(" $utility.firstToLowerCase($field.getName()) not set");
					throw new MissingParameterException(" $utility.firstToLowerCase($field.getName()) not set");
				} else {
					element.addContent($utility.firstToLowerCase($field.getName())$encodeXML("$field.getName()",ns));
				}
			#else
				//TODO 4 template parameter encode wrote this - unexpected object $field $field.getName()
			#end
		#end
		## parameter or choice
		//parameters
		#foreach($field in $custom.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
	
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			## check if it is a list 	
			#if ($field.getRepeat()==$mustListRepeat)
				if ($curName$list== null){
					LOGGER.warn(" $curName$list not set");
					throw new MissingParameterException("  $curName$list not set");
				} 
				for ($field.getType() field : $curName$list){
					##choices have to be set by the actual name - not the name of the interface
					#if ($field.getNamespace())				
						Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
						element.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns2));
					#else 
						element.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
					#end
				}
			#elseif ($field.getRepeat()== $optionalListRepeat)
				if ($curName$list == null){
					LOGGER.info("$curName$list not set");
				} else {
					for ($field.getType() field : $curName$list){
					#if ($field.getNamespace())				
						Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
						element.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns2));
					#else 
						element.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", ""),ns));
					#end
					}
				}
			#elseif ($field.getRepeat()== $optionalRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
				} else {
					#if ($field.getName())
							// name was defined for this parameter - must use it to avoid confusion with parameters of same type
						#if ($field.getNamespace())				
							Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
							element.addContent($curName$encodeXML("$curName",ns2));
						#else 
							element.addContent($curName$encodeXML("$curName",ns));
						#end
					#else
						#if ($field.getNamespace())				
							Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
							element.addContent($curName$encodeXML($curName$getClassName,ns2));
						#else 
							element.addContent($curName$encodeXML($curName$getClassName,ns));
						#end
					#end
				}
			#elseif ($field.getRepeat()== $exactlyOnceRepeat)
				if ($curName == null){
					LOGGER.info("$curName not set");
					throw new MissingParameterException("$curName not set");
				} else {
					#if ($field.getName())
							// name was defined for this parameter - must use it to avoid confusion with parameters of same type
						#if ($field.getNamespace())				
							Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
							element.addContent($curName$encodeXML("$curName",ns2));
						#else 
							element.addContent($curName$encodeXML("$curName",ns));
						#end
					#else
						#if ($field.getNamespace())				
							Namespace ns2 = Namespace.getNamespace("$field.getNamespace()",LLRPConstants.$field.getNamespace().toUpperCase()$ns));
							element.addContent($curName$encodeXML($curName$getClassName,ns2));
						#else 
							element.addContent($curName$encodeXML($curName$getClassName,ns));
						#end
					#end					
				}
			#else
				// TODO field.getRepeat() = $field.getRepeat()
			#end
		#end
		return element;
	}

##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved()	
	

##decode
  
  	@Override
	protected void decodeBinarySpecific(LLRPBitList binary) {
		int position = 0;
		int tempByteLength;
		int tempLength=0;
		int count;
		SignedShort type;
		int fieldCount;
		Custom custom;
		
		## vendorIdentifier and parameterSubtye are inherited from custom
		vendorIdentifier = new UnsignedInteger (binary.subList(position, UnsignedInteger.length()));
		position += UnsignedInteger.length();
																															// length given through static method
		parameterSubtype = new UnsignedInteger (binary.subList(position, UnsignedInteger.length()));
		position += UnsignedInteger.length();
		
		## field or reserved
		#foreach($field in $custom.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				position+= $resName$utility.getCurrentNumerOfReserved()$length;
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
						#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")
				#else					
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				#if ($utility.isArray($curType))
					// array. first 16 bits indicate length of array
					fieldCount = new UnsignedShort(binary.subList(position, UnsignedShort.length())).toShort();			
					tempLength=$curType$length*fieldCount+UnsignedShort.length();
					$curName = new $curType (binary.subList(position, tempLength));
					position += tempLength;
					//might need padding
					// must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
					if (tempLength%8>0){
						position+=(8-tempLength%8);
					} 
				#elseif ($utility.isByteToEnd($curType))
					$curName = new $curType (binary.subList(position, binary.length()-position));
					position += binary.length()-position;

				#else
					// length given through static method
					$curName = new $curType (binary.subList(position, $curType$length));
					position += $curType$length;
				#end
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $custom.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		
		## check if it is a list 	
		#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			// list of parameters
			$curName$list = new LinkedList<$field.getType()>();
			while (position < binary.length()){
				boolean atLeastOnce = false;
				// look ahead to see type
				type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
				tempByteLength = new UnsignedShort(binary.subList(position+16, 16)).toShort();			
				tempLength=8*tempByteLength;
				##distinguish between choices and parameters. For choices, we must find the actual types
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustomParameter($subtype))
							## custom parameter need separate treatment
							// custom
							custom = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($custom.getName()))
								if (custom.getParameterSubtype().intValue() == $custom$subtypeNr){ 
									custom = new $custom (custom);
								}
							#end
							//end allowed parameters
						#else						
							if (type.equals($subtype$typeNum)){
								$curName$list$add (new $subtype (binary.subList(position,tempLength)));
								position+=tempLength;
								atLeastOnce = true;
								continue;
							}
						#end
						
					#end
					
					#if ($field.getRepeat()==$mustListRepeat )
						//if no parameter matched, jump out of while loop, if it is not an optional parameter, show warning
						LOGGER.warn("no parameter for $curName$list but List is not optional");
					#end
					break;
				#elseif ($utility.isCustom($field.getType()))
					## custom parameter need separate treatment
					// custom
					custom = new $field.getType() (binary.subList(position,tempLength)); 

					// replace custom with actual type
					#foreach ($custom in $utility.allowedCustom($custom.getName()))
						if (custom.getParameterSubtype().intValue() == $custom$subtypeNr){ 
							custom = new $custom (custom);
						}
					#end

					position += tempLength; // modified here to correctly increment the position of processed bits

				#elseif ($utility.hasType($field,$parameterReference))
					//paramRef
					$curName$list$add (new $field.getType() (binary.subList(position,tempLength)));
					position+=tempLength;		
				#else
					//TODO template wrote this in decode > list- unexpected object $field in while
				#end
			}
			


		#elseif ($field.getRepeat()==$exactlyOnceRepeat || $field.getRepeat()==$optionalRepeat)
			##may be optional or exactly once
			// look ahead to see type
			// may be optional or exactly once
			#if ($field.getRepeat()==$optionalRepeat)
				## If it is an optional parameter, binary list might be finished - we add a check only in this case
				if (position < binary.length()){
				// we checked to see if binary is finished since this is an optional parameter
			#end
				// if first bit is one it is a TV Parameter
				if (binary.get(position)){
					// do not take the first bit as it is always 1
        			type = new SignedShort(binary.subList(position+1, 7));
				} else {
					type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
					tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
					tempLength=8*tempByteLength;
				}
					##distinguish between choices and parameters. For choices, we must find the actual types
					#if ($utility.hasType($field,$choiceReference))
						##check all subtypes
						boolean found = false;
						#foreach ($subtype in $utility.getSubTypes($field.getType()))
													//if first bit is 1 it is a TV Parameter
							
							if (binary.get(position)){
								// length can statically be determined for TV Parameters
		        				tempLength = $subtype$length;
							} 
							#if ($utility.isCustom($subtype))
								## custom parameter need separate treatment
								// custom
								custom = new $field.getType() (binary.subList(position,tempLength)); 	
								#foreach ($custom in $utility.allowedCustom($field.getType()))
									if (custom.getParameterSubtype().intValue() == $custom$subtypeNr){ 
										custom = new $custom (custom);
									}
								#end
							#else						
								if (typeNum.equals($subtype$typeNum)){
									if (binary.get(position)){
										// length can statically be determined for TV Parameters
        								tempLength = $curName$length;
									} 
									$curName = new $subtype (binary.subList(position,tempLength));
									position += tempLength;
									found = true;
								}
							#end
						#end
						if (!found){
							LOGGER.warn("no parameter for $curName but it is not optional");
						}
					#elseif ($utility.isCustom($field.getType()))
						## custom parameter need separate treatment
						// custom
						custom = new $field.getType() (binary.subList(position,tempLength));
						// replace custom with actual type 	
						#foreach ($custom in $utility.allowedCustom($field.getType()))
							if (custom.getParameterSubtype().intValue() == $custom$subtypeNr){ 
								custom = new $custom (custom);
							}
						#end

						position += tempLength; // modified here to correctly increment the position of processed bits

					#elseif ($utility.hasType($field,$parameterReference))
						if(type.equals($field.getType()$typeNum)){
							if (binary.get(position)){
								// length can statically be determined for TV Parameters
        						tempLength = $curName$length;
							} 
							$curName = new $field.getType() (binary.subList(position,tempLength));	
							position+=tempLength;
						} else {
						## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
							#if ($field.getRepeat()==$exactlyOnceRepeat )
								// its an error - parameter must be here
								LOGGER.warn("parameter "+$curName +" not set but it is not optional");
								//throw new MissingParameterException("parameter expected: $field.getType() but recieved " + type );
							#else
								LOGGER.info("parameter "+$curName +" not set");
							#end
						}	
					#else
						//TODO template wrote this - unexpected object $field
					#end
			#if ($field.getRepeat()==$optionalRepeat)
				##closing parenthesis to if statement before
				}	
			#end
		#else
			// TODO repeat is $field.getRepeat() but this is not yet implemented
		#end
	#end
  	}
  	

##must clear numbers of reserved definitons found
$utility.clearNumberOfReserved()




  		
##decode XML
  
		/**
	 * {@inheritDoc}
	 */
	public void decodeXML(Element element)  throws InvalidLLRPMessageException {
		Element temp = null;
		List<Element> tempList = null;
		boolean atLeastOnce = false;
		## field or reserved
		#foreach($field in $custom.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				## skip reserved
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
						#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				
				#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($curType ="$firstF$secondF$thirdF")
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				temp = element.getChild("$field.getName()",element.getNamespace());
				if (temp != null){
					$curName = new $curType (temp);
				}
			#else
						//TODO 8 template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $custom.getParameterOrChoice())
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			#if ($utility.hasType($field,$parameterReference))
				//parameter - not choices - no special actions needed
				#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
					//we expect a list of parameters
					$curName$list = new LinkedList<$field.getType()>();
					tempList = element.getChildren("$field.getType()",element.getNamespace());
					#if ( $field.getRepeat() == $mustListRepeat)
						if (tempList == null || tempList.isEmpty() ){
							LOGGER.warn("$custom.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$custom.getName() misses non optional parameter of type $curName$list");
						} else {
							for (Element e : tempList){
								#if ($utility.isCustom($field.getType()))
									//custom parameter
									#set($hasAllowed = "false")
									#foreach ($custom in $utility.allowedCustom($custom))
										#set($hasAllowed = "true")
										tempList = element.getChildren("$custom",element.getNamespace());
										for Element e: tempList){
											custom = new Custom(e); 
											$curName$list$add (new $custom (custom));
											atLeastOnce = true;
											LOGGER.debug("adding $custom to $curName$list ");
											
										}
									#end
									#if ($hasAllowed == "false")
											$curName$list$add (new $field.getType()(e));
											LOGGER.debug("adding $field.getType() to $curName$list ");
									#end
									//end custom
								#else 
									$curName$list$add (new $field.getType()(e));
									LOGGER.debug("adding $field.getType() to $curName$list ");
								#end
							}	
						}
					#else
					##if it is optional, just inform that it is not set
						if (tempList == null || tempList.isEmpty() ){
							LOGGER.info("$custom.getName() misses non optional parameter of type $curName$list");
						} else {
							for (Element e : tempList){
								#if ($utility.isCustom($field.getType()))
									//custom parameter
									#set($hasAllowed = "false")
									#foreach ($custom in $utility.allowedCustom($custom))
										#set($hasAllowed = "true")
										tempList = element.getChildren("$custom",element.getNamespace());
										for Element e: tempList){
											custom = new Custom(e); 
											$curName$list$add (new $custom (custom));
											atLeastOnce = true;
											LOGGER.debug("adding $custom to $curName$list ");
										}
									#end
									#if ($hasAllowed == "false")
											$curName$list$add (new $field.getType()(e));
											LOGGER.debug("adding $field.getType() to $curName$list ");
									#end
									//end custom
								#else 
									$curName$list$add (new $field.getType()(e));
									LOGGER.debug("adding $field.getType() to $curName$list ");
								#end
							}	
						}
					#end
					
			
				#else
					// single parameter
					temp = element.getChild("$field.getType()",element.getNamespace());
					if (temp != null){
						$curName = new $field.getType()(temp);
						LOGGER.info("setting parameter $curName for parameter $custom.getName()");
					} else {
						#if ( $field.getRepeat() == $exactlyOnceRepeat)
							LOGGER.warn("$custom.getName() misses non optional parameter of type $curName");
							throw new MissingParameterException("$custom.getName() misses non optional parameter of type $curName");
						#else
							##if it is optional, just inform that it is not set
							LOGGER.info("$custom.getName() misses non optional parameter of type $curName");
						#end
					}
				#end		
			#elseif ($utility.hasType($field,$choiceReference))
				//choices - must check all possible subtypes
				#if ($field.getRepeat()==$mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
					//list of Choice Type Parameter
					$curName$list = new LinkedList<$field.getType()>();
					// for each possible subtype get all childs
						##check all subtypes
						#foreach ($subtype in $utility.getSubTypes($field.getType()))
							#if ($utility.isCustom($subtype))
								## custom parameter need separate treatment
								// check for all custom parameters allowed for this parameter 
								#set($hasAllowed = "false")
								#foreach ($custom in $utility.allowedCustom($custom))
									#set($hasAllowed = "true")
									tempList = element.getChildren("$custom",element.getNamespace());
									for (Element e: tempList){
										custom = new Custom(e); 
										$curName$list$add (new $custom (custom));
										atLeastOnce = true;
										LOGGER.debug("adding $custom to $curName$list ");
									}
								#end
								#if ($hasAllowed == "false")
									tempList = element.getChildren("Custom",element.getNamespace());
									for (Element e: tempList){
										$curName$list$add (new Custom(e));
										LOGGER.debug("adding $field.getType() to $curName$list ");
									}
									
								#end
								//end allowed parameters
							#else
								tempList = element.getChildren("$subtype",element.getNamespace());
								for (Element e : tempList){
									$curName$list$add (new $subtype(e));
									LOGGER.debug("adding $subtype to $curName$list ");
									atLeastOnce = true;
								}
								
							#end
							
						#end
						if (!atLeastOnce){
							#if ( $field.getRepeat() == $mustListRepeat)
								LOGGER.warn("$custom.getName() misses non optional parameter of type $curName$list");
								throw new MissingParameterException("$custom.getName() misses non optional parameter of type $curName$list");
							#else
								LOGGER.info("$custom.getName() misses optional parameter of type $curName$list");
							#end	
						}
						atLeastOnce = false;		
				#else
				
					##check all subtypes
					boolean found = false;
					LOGGER.debug("decoding choice type $field.getType() ");
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
							temp = element.getChild("$subtype",element.getNamespace());
							if (temp != null){
								custom = new $field.getType() (temp));	
								#foreach ($custom in $utility.allowedCustom($field.getType()))
									if (temp.getName().equalsIgnoreCase("$custom")){ 
										$curName =new $custom (custom) ;
										LOGGER.debug(" $curName is instantiated with $custom ");
									}
								#end
							}
						#else		
							// try to get child for each possible subtype
							temp = element.getChild("$subtype",element.getNamespace());			
							if (temp != null){
								$curName = new $subtype (temp);
								LOGGER.debug(" $curName instatiated to $subtype with");
								found = true;
							} 
						#end
					#end
					if (!found){
						#if ( $field.getRepeat() == $mustListRepeat)
							LOGGER.warn("$custom.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$custom.getName() misses non optional parameter of type $curName$list");
						#else
						##if it is optional, just inform that it is not set
							LOGGER.info("$custom.getName() misses optional parameter of type $curName$list");
						#end	
					}				
				
				#end
			#else
				//TODO 9 template wrote this in decode > list- unexpected object $field in while
			#end	
		#end
  	}
  	


 

   
   	
	
## generate setters 
	//setters
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $curType .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.firstToUpperCase($curType)  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
				#set ($firstF = "$utility.convertType($field.getType().value())")
				#set ($secondF = "_")
				#set ($thirdF = "$field.getFormat()")
				#set ($together = "$firstF$secondF$thirdF")
				/**
				 * set $utility.firstToLowerCase($field.getName()) of type $together .
				 * @param  $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$utility.firstToUpperCase($field.getName())(final $utility.firstToUpperCase($together) $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * set   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()) .
				 * @param   $utility.firstToLowerCase($field.getName()) to be set
				 */
				public void set$field.getName()(final $utility.convertType($field.getType().value())  $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			
			#end
			
		#else
					//TODO 11 template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * set $curName$list of type  List &lt;$field.getType()>.
			 * @param  $curName$list to be set
			 */
			public void set$utility.firstToUpperCase($curName)$list (final List<$field.getType()> $curName$list) {
				this.$curName$list = $curName$list;
			}
				
		#else
			/**
			 * set $curName of type $field.getType().
			 * @param  $curName to be set
			 */
			public void set$utility.firstToUpperCase($curName) (final $field.getType() $curName)  {
				this.$curName = $curName;
			}
		#end
	#end
	// end setter
	
## generate getters 
	//getters
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		## FieldDefinition
			#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type $curType.
				 * @return  $curType
				 */
				public $utility.firstToUpperCase($curType) get$utility.firstToUpperCase($field.getName())$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#elseif ($field.getFormat())
					#set ($firstF = "$utility.convertType($field.getType().value())")
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($together = "$firstF$secondF$thirdF")
				/**
				 * get $utility.firstToLowerCase($field.getName()) of type  $together.
				 * @return  $together
				 */
				public  $together get$utility.firstToUpperCase($field.getName())$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			
			#else
				/**
				 * get   $utility.firstToLowerCase($field.getName()) of type $utility.convertType($field.getType().value()).
				 * @return   type $utility.convertType($field.getType().value()) to be set
				 */
				public $utility.convertType($field.getType().value()) get$field.getName()$emptyBrack{
					return this.$utility.firstToLowerCase($field.getName());
				}
			#end
		#else
			//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $field.getName())
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
			/**
			 * get $curName$list of type List &lt;$field.getType()> .
			 * @return  List &lt;$field.getType()>
			 */
			public List<$field.getType()> get$utility.firstToUpperCase($curName)$list$emptyBrack {
				return $curName$list;
			}
				
		#else
			/**
			 * get $curName of type $field.getType() .
			 * @return  $field.getType()
			 */
			public $field.getType() get$utility.firstToUpperCase($curName)$emptyBrack  {
				return $curName;
			}
		#end
	#end
	// end getters
##end getters	
	

	
## add methods
	 //add methods
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
			#if ($field.getName())
				#set($aName = $utility.firstToLowerCase($field.getName()))
				#set($curType = $field.getName())
			#else
				#set ($aName = $utility.firstToLowerCase($field.getType()))
				#set($curType = $field.getType())
			#end 

			#if ($utility.isArray($curType))
						
				/**
				 * add element of type $utility.arrayBaseType($curType) to $curType .
				 * @param  $utility.arrayBaseType($curType)
				 */
				public void addTo$curType ($utility.arrayBaseType($curType) element) {
					if (this.$aName == null){
						this.$aName = new $curType();
					} 
				 	this.$aName$add (element);
				}
			#end		
		## FieldDefinition
		#else
					//TODO 12 template wrote this - unexpected object $field
		#end	
	#end
  
  

  
	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
				/**
				 * add element $curName of type $field.getType() .
				 * @param  $curName of type $field.getType() 
				 */
			public void addTo$utility.firstToUpperCase($curName)$list ($field.getType() $curName) {
				if (this.$curName$list == null){
					this.$curName$list = new LinkedList<$field.getType()>();
				} 
			 	this.$curName$list$add ($curName);
			}
				
		#end
	#end
	// end add
## end add	
	
## TV Parameters have type number from 0 - 127, TLV from 128 - 2047
#if ($custom.getTypeNum() < 128)
## TV Parameters need static length method for decoding
	/**
	* return length of parameter. For TV Parameter it is always length of its field plus 8 bits for type.
	* @return Integer giving length
	*/
	public static Integer length(){
		int tempLength = PARAMETERTYPELENGTH;
		#foreach($field in $custom.getFieldOrReserved())
			// the length of a TV parameter in bits is always the type 
		#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
			tempLength += $curType$length;
		#elseif ($field.getFormat())
			#set ($firstF = "$utility.convertType($field.getType().value())")
			#set ($secondF = "_")
			#set ($thirdF = "$field.getFormat()")
			 tempLength += $firstF$secondF$thirdF$length; 
		#else
			tempLength += $utility.convertType($field.getType().value())$length;
		#end			
		#end
		return tempLength;
	}
#else
## these method basically only exists for compile reasons
	/**
	* For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
	* @return Integer always zero
	*/
	public static Integer length(){
		return 0;
	}
#end
	
	/**
    * {@inheritDoc}
    */
	public String getName() {
		return "$parameter.Name";
	
	}
	
	
## end of Class	
}
