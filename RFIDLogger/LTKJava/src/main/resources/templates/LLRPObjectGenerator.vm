 ## LLRPObjectGenerator.vm


##set the class names here

#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($parameterDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")

#set ($mustListRepeat = "1-N")
#set ($exactlyOnceRepeat = "1")
#set ($optionalRepeat = "0-1")
#set ($optionalListRepeat = "0-N")
#set($list = "List")
#set($emptyBrack = "()")

/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/
 * for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
 
package org.llrp.ltk.generated;


import org.apache.log4j.Logger;

import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitArray_HEX;
import org.llrp.ltk.types.BytesToEnd_HEX;
import org.llrp.ltk.types.Integer96_HEX;
import org.llrp.ltk.types.SignedByte;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TwoBitField;
import org.llrp.ltk.types.UTF8String_UTF_8;
import org.llrp.ltk.types.UnsignedByteArray_HEX;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedIntegerArray;
import org.llrp.ltk.types.UnsignedLong;
import org.llrp.ltk.types.UnsignedLong_DATETIME;
import org.llrp.ltk.types.UnsignedShort;
import org.llrp.ltk.types.UnsignedShortArray;
import org.llrp.ltk.types.UnsignedShortArray_HEX;

#foreach($parameter in $parameters)
	import org.llrp.ltk.generated.parameters.$parameter.getName();
#end
#foreach($choice in $choices)
	import org.llrp.ltk.generated.interfaces.$choice.getName();
#end
#foreach($message in $messages)
	import org.llrp.ltk.generated.messages.$message.getName();
#end
#foreach($enumeration in $enumerations)
	import org.llrp.ltk.generated.enumerations.$enumeration.getName();
#end
## hack for array of enumerations type
import org.llrp.ltk.generated.enumerations.AirProtocolsArray;


import java.util.LinkedList;


public class LLRPObjectGenerator {





#foreach($choice in $choices)
	public static $choice.getName() create$choice.getName()$emptyBrack{
		#set($obj = $choice.getParameter().get(0))
		#set($impl = $obj.getType() )
	 	return create$impl$emptyBrack;
	}
#end


#foreach($message in $messages)
	public static $message.getName() create$message.getName()$emptyBrack{ 
	LinkedList list;
		$message.getName() inst = new $message.getName()$emptyBrack;
		// fields
		#foreach($field in $message.getFieldOrReserved())
		
		## FieldDefinition
			#if ($utility.hasType($field,$fieldDefinition))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
					inst.set$field.getName()(new $curType());
				#elseif ($field.getFormat())
					#set ($firstF = $utility.convertType($field.getType().value()))
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($together = "$firstF$secondF$thirdF")
					inst.set$field.getName()(new $together$emptyBrack);
				#else
					#set ($xmlType = $field.getType().value())
					#set($curType = $utility.convertType($xmlType))
					inst.set$field.getName()(new $curType$emptyBrack);
				#end	
			#end
		#end
		
		
		## parameter or choice
		#foreach($field in $message.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
			#if ($field.getName())
				#set ($curName = $field.getName())
			#else
				#set ($curName = $field.getType())
			#end 
			#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
				list = new LinkedList();
				$curName _$curName = create$curName$emptyBrack;
				list.add(_$curName);
				list.add(_$curName);
				inst.set$curName$list(list);
			#else
				inst.set$curName(create$curName());
			#end
		#end	
		return inst;
		
		
		
	}
#end
	
	


#foreach($parameter in $parameters)
	public static $parameter.getName() create$parameter.getName()$emptyBrack{
	 LinkedList list;
		$parameter.getName() inst = new $parameter.getName()$emptyBrack;
		// fields
		#foreach($field in $parameter.getFieldOrReserved())
		## FieldDefinition
			
			#if ($utility.hasType($field,$fieldDefinition))
				#if ($field.getEnumeration())
					#if ($utility.isArray($utility.convertType($field.getType().value())))
						#set ($arr = "Array")
						#set ($temp = "$utility.firstToUpperCase($field.getEnumeration())")
						#set ($curType = "$temp$arr")
					#else
						#set ($curType = $utility.firstToUpperCase($field.getEnumeration()))
					#end
					inst.set$field.getName()(new $curType());
				#elseif ($field.getFormat())
					#set ($firstF = $utility.convertType($field.getType().value()))
					#set ($secondF = "_")
					#set ($thirdF = "$field.getFormat()")
					#set ($together = "$firstF$secondF$thirdF")
					inst.set$field.getName()(new $together$emptyBrack);
				#else
					#set ($xmlType = $field.getType().value())
					#set($curType = $utility.convertType($xmlType))
					inst.set$field.getName()(new $curType$emptyBrack);
				#end
			#end
		#end
		
		
		## parameter or choice
		#foreach($field in $parameter.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
			#if ($field.getName())
				#set ($curName = $field.getName())
			#else
				#set ($curName = $field.getType())
			#end 
			#if ($field.getRepeat()== $mustListRepeat  || $field.getRepeat()== $optionalListRepeat)
				list = new LinkedList();
				$curName _$curName = create$curName$emptyBrack;
				list.add(_$curName);
				inst.set$curName$list(list);
			#else
				#if ($curName == "ParameterError")
					## we have to break the recursive generation of a parameter error
					// parameter error skipped because it would lead to recursive calls
				#else
					inst.set$curName(create$curName());
				#end
			#end
		#end	
		return inst;
		
		
		
	}
#end
		
}